/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IWalletManager {
  export type ProofDataStruct = {
    commitment: BytesLike;
    nullifier: BytesLike;
    root: BytesLike;
    token: AddressLike;
    receiver: AddressLike;
    relayer: AddressLike;
    amount: BigNumberish;
    amountRelayer: BigNumberish;
    approve: boolean;
    proof: BytesLike;
    call: BytesLike;
  };

  export type ProofDataStructOutput = [
    commitment: string,
    nullifier: string,
    root: string,
    token: string,
    receiver: string,
    relayer: string,
    amount: bigint,
    amountRelayer: bigint,
    approve: boolean,
    proof: string,
    call: string
  ] & {
    commitment: string;
    nullifier: string;
    root: string;
    token: string;
    receiver: string;
    relayer: string;
    amount: bigint;
    amountRelayer: bigint;
    approve: boolean;
    proof: string;
    call: string;
  };
}

export interface WalletManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ROOT_HISTORY_SIZE"
      | "commitments"
      | "currentRootIndex"
      | "deposit"
      | "depositErc20"
      | "filledSubtrees"
      | "getLastRoot"
      | "isAuthorizedToken"
      | "isKnownRoot"
      | "levels"
      | "nextIndex"
      | "nullifiers"
      | "owner"
      | "renounceOwnership"
      | "roots"
      | "setAuthorizedToken"
      | "swap"
      | "transfer"
      | "transferOwnership"
      | "verifier"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AddAction" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ROOT_HISTORY_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitments",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRootIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      AddressLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositErc20",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "filledSubtrees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isKnownRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "levels", values?: undefined): string;
  encodeFunctionData(functionFragment: "nextIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nullifiers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "roots", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedToken",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [IWalletManager.ProofDataStruct, IWalletManager.ProofDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [IWalletManager.ProofDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ROOT_HISTORY_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRootIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "filledSubtrees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKnownRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "levels", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nullifiers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roots", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
}

export namespace AddActionEvent {
  export type InputTuple = [
    nullifier: BytesLike,
    commitment: BytesLike,
    leafIndex: BigNumberish,
    proofData: IWalletManager.ProofDataStruct,
    actionType: BigNumberish
  ];
  export type OutputTuple = [
    nullifier: string,
    commitment: string,
    leafIndex: bigint,
    proofData: IWalletManager.ProofDataStructOutput,
    actionType: bigint
  ];
  export interface OutputObject {
    nullifier: string;
    commitment: string;
    leafIndex: bigint;
    proofData: IWalletManager.ProofDataStructOutput;
    actionType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WalletManager extends BaseContract {
  connect(runner?: ContractRunner | null): WalletManager;
  waitForDeployment(): Promise<this>;

  interface: WalletManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ROOT_HISTORY_SIZE: TypedContractMethod<[], [bigint], "view">;

  commitments: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  currentRootIndex: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<
    [
      _commitment: BytesLike,
      _nullifier: BytesLike,
      _root: BytesLike,
      _relayer: AddressLike,
      _amountRelayer: BigNumberish,
      _proof: BytesLike
    ],
    [void],
    "payable"
  >;

  depositErc20: TypedContractMethod<
    [
      _commitment: BytesLike,
      _nullifier: BytesLike,
      _root: BytesLike,
      _token: AddressLike,
      _relayer: AddressLike,
      _amount: BigNumberish,
      _amountRelayer: BigNumberish,
      _proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  filledSubtrees: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getLastRoot: TypedContractMethod<[], [string], "view">;

  isAuthorizedToken: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  isKnownRoot: TypedContractMethod<[_root: BytesLike], [boolean], "view">;

  levels: TypedContractMethod<[], [bigint], "view">;

  nextIndex: TypedContractMethod<[], [bigint], "view">;

  nullifiers: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  roots: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  setAuthorizedToken: TypedContractMethod<
    [_token: AddressLike, _authorized: boolean],
    [void],
    "nonpayable"
  >;

  swap: TypedContractMethod<
    [
      _proofData: IWalletManager.ProofDataStruct,
      _proofDataBack: IWalletManager.ProofDataStruct
    ],
    [void],
    "nonpayable"
  >;

  transfer: TypedContractMethod<
    [_proofData: IWalletManager.ProofDataStruct],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  verifier: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ROOT_HISTORY_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "commitments"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "currentRootIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      _commitment: BytesLike,
      _nullifier: BytesLike,
      _root: BytesLike,
      _relayer: AddressLike,
      _amountRelayer: BigNumberish,
      _proof: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositErc20"
  ): TypedContractMethod<
    [
      _commitment: BytesLike,
      _nullifier: BytesLike,
      _root: BytesLike,
      _token: AddressLike,
      _relayer: AddressLike,
      _amount: BigNumberish,
      _amountRelayer: BigNumberish,
      _proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "filledSubtrees"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getLastRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isAuthorizedToken"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isKnownRoot"
  ): TypedContractMethod<[_root: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "levels"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nullifiers"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "roots"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "setAuthorizedToken"
  ): TypedContractMethod<
    [_token: AddressLike, _authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [
      _proofData: IWalletManager.ProofDataStruct,
      _proofDataBack: IWalletManager.ProofDataStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [_proofData: IWalletManager.ProofDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AddAction"
  ): TypedContractEvent<
    AddActionEvent.InputTuple,
    AddActionEvent.OutputTuple,
    AddActionEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AddAction(bytes32,bytes32,uint256,tuple,uint8)": TypedContractEvent<
      AddActionEvent.InputTuple,
      AddActionEvent.OutputTuple,
      AddActionEvent.OutputObject
    >;
    AddAction: TypedContractEvent<
      AddActionEvent.InputTuple,
      AddActionEvent.OutputTuple,
      AddActionEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
